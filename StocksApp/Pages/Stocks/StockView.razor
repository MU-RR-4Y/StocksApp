@page "/stocklist/{Id:int}"
@using StocksApp.Components
@using StocksApp.Models.FX_models;
@inject NavigationManager NavManager;
@inject IDbContextFactory<StockAppDbContext> context
@inject IHttpClientFactory _clientFactory

<PageTitle>@stock.shortName</PageTitle>
<h1>@stock.shortName</h1>


<div>
    <h3>Summary Data</h3>
    <p>@stock.symbol @stock.currency @stock.regularMarketPrice - Exchange @stock.exchange</p>
</div>

<div>
    <br/>
    <p>***** Stock Price Chart to be added *****</p>
    <br />
</div>

<div>
    <h3>Pricing Data</h3>
    <p>Current Price : @stock.currency @stock.regularMarketPrice</p>
    <p>Previous Close: @stock.currency @stock.regularMarketPreviousClose</p>
    <br/>
    <p>Daily Change : @stock.currency @stock.regularMarketChange</p>
    <p>Daily Change % : @stock.regularMarketChangePercent</p>
    <br/>
    <p>Day Low : @stock.currency @stock.regularMarketDayLow</p>
    <p>Day High : @stock.currency @stock.regularMarketDayHigh</p>
    <p>Current FX rate GBP/USD : @_GBPtoUSD</p>
    <p>Inversed FX rate USD/GBP : @_USDtoGBP</p>
</div>

<br/>

@if(userList is not null)
{
    <div>
    <MudForm>
        <MudSelect T="Portfolio" Label="Portfolios" AnchorOrigin="Origin.BottomCenter" @bind-Value="selectedPortfolio" Required="true">
            @foreach (User user in userList)
            {
                <MudSelectItem required Value="user.userPortfolio" >@user.FirstName @user.LastName</MudSelectItem>
            }
        </MudSelect>
        <MudButton  OnClick="Buy" Variant="Variant.Filled" Color="Color.Success">Buy stock</MudButton>
    </MudForm>
    </div>


    <TradeStock visibility="@isOpen" stock="@stock" _direction="@tradeDirection" addOrder="AddOrder" portfolio="@selectedPortfolio" />
}

<br/>

<div>
    <h3>Current Holdings</h3>
    <MudTable Items="stockHolders" Hover="true" Class="d-flex justify-end">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Number of Shares Held</MudTh>
            <MudTh>Cash Value</MudTh>
            <MudTh class="d-flex justify-center">Actions</MudTh>

        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name"> @context.FirstName @context.LastName</MudTd>
            @{
                int NumOfShares =0 ;
                double CashValue = 0;

                foreach (var holding in context.userPortfolio.holdings)
                {
                    if( holding.symbol == stock.symbol)
                    {
                        NumOfShares = holding.numberofShares;
                        CashValue = holding.currentValue;
                    }
                }

            }


                <MudTd DataLabel=">Number of Shares Held">@NumOfShares</MudTd>
            <MudTd DataLabel=">Cash Value">@($"{CashValue:C2}")</MudTd>


                <MudTd DataLabel="Actions" class="d-flex justify-space-evenly">
                <MudButton OnClick="@(()=>BuyFromHoldingsView(context.userPortfolio))" Variant="Variant.Filled" Size="Size.Small" Color="Color.Success">Increase Position</MudButton>
                <MudButton OnClick="@(()=>SellFromHoldingsView(context.userPortfolio))" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small">Sell Stock</MudButton>
                </MudTd>

            </RowTemplate>
        </MudTable>

</div>

<MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" OnClick="NavigateToUsersPage">Back to Stocks</MudButton>

    @code {
    // TODO: Stock view to be add, look at bringing in charts? JSinterop or Mudblazor charts
    // TODO: add Buy/Sell buttons/functionality
    // TODO: add validation on portfolio select for initial buy submit
    // TODO: Look into generating a basic orderconfirmation doc. Where will this be stored?

    [Parameter]
    public int Id { get; set; }
    public Stock stock { get; set; }
    public User[] stockHolders { get; set; }
    public double _GBPtoUSD { get; set; }
    public double _USDtoGBP { get; set; }

    // variables for TradeStock Component
    private bool isOpen = false;
    private string tradeDirection { get; set; } 
    public Portfolio selectedPortfolio { get; set; }
    public User[]? userList { get; set; }




    protected override async Task OnInitializedAsync()
    {
        using var ctx = context.CreateDbContext();

        //Get FX rates
        var fxrates = ctx.FxRates.FirstOrDefault();
        _USDtoGBP = fxrates.USDtoGBP;


        //Get Stock
        stock = ctx.Stocks.FirstOrDefault(s => s.Id == Id);

        //Get users and portfolios to create array of users who hold this stock in their portfolio
        var users = await ctx.Users
        .Include(u => u.userPortfolio)
        .ThenInclude(p => p.holdings) 
        .Include(u =>u.userPortfolio)
        .ThenInclude(p => p.orders)  
        .ToArrayAsync();
        userList = users;

        var portfolioIds = await ctx.Holdings
                            .Where(p => p.symbol == stock.symbol)
                            .Select(p => p.portfolioId)
                            .ToArrayAsync();

        stockHolders = portfolioIds
                .SelectMany(p => users
                    .Where(u => u.PortfolioId == p)
                    .Select(u => u))
                    .ToArray();

    }




    protected async Task AddOrder(Stock stock, Portfolio portfolio, string _direction, int numberOfShares, double fxRate)
    {
        isOpen = false;
        using var ctx = context.CreateDbContext();

        //Create new order
        Order newOrder = portfolio.CreateNewOrder(stock, _direction, numberOfShares, fxRate);
        ctx.Orders.Add(newOrder);
        await ctx.SaveChangesAsync();



        // update client side holdings

        portfolio.UpdateHoldings(newOrder, fxRate);

        // update holdings in database
        foreach (var holding in portfolio.holdings)
        {
            var databaseHolding = ctx.Holdings.FirstOrDefault(h => (h.symbol == h.symbol && h.portfolioId == portfolio.Id));
            if (databaseHolding is not null)
            {
                ctx.Entry<Holdings>(databaseHolding).State = EntityState.Detached;
                holding.Id = databaseHolding.Id;
                ctx.Holdings.Update(holding);
            }
            else
            {
                ctx.Holdings.Add(holding);
            }

            // holding.CalculateHoldingValueVsPerformance(portfolio.orders, fxRate);
        }

        ctx.Portfolio.Update(portfolio);
        await ctx.SaveChangesAsync();

        StateHasChanged();



    }



    public async void Buy()
    {
        tradeDirection = "Buy";
        isOpen = true;
    }

    public async void BuyFromHoldingsView(Portfolio portfolio)
    {
        tradeDirection = "Buy";
        selectedPortfolio = portfolio;
        isOpen = true;

    }

    public async void SellFromHoldingsView(Portfolio portfolio)
    {
        tradeDirection = "Sell";
        selectedPortfolio = portfolio;
        isOpen = true;
    }

    private void NavigateToUsersPage()
    {
        NavManager.NavigateTo("/stocklist");
    }


}
