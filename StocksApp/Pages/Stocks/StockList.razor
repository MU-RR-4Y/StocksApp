@page "/stocklist"
@using StocksApp.Data;
@using System.Text.Json;
@inject IHttpClientFactory _clientFactory
@inject IDbContextFactory<StockAppDbContext> ctxFactory
@inject NavigationManager NavManager
<PageTitle>Stocks</PageTitle>
<h1>Stock List</h1>

@if(stocks is null)
{
    <div>Loading...</div>
}
else
{
    <MudTable Items="stocks"Hover="true" >
       <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,int.MaxValue}" />
       </PagerContent>
        <HeaderContent>
                <MudTh>Stock</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Current Price</MudTh>
                <MudTh>Prev Close</MudTh>
                <MudTh>Price Change</MudTh>
                <MudTh>% Change</MudTh>
        </HeaderContent>
        <RowTemplate>
                <MudTd DataLabel="Stock">
                    <MudButton
                        Variant="Variant.Filled"
                        Color="Color.Secondary"
                        OnClick="(()=>GoToStockView(context))"
                    >View Stock</MudButton> @context.symbol
                </MudTd>
                <MudTd DataLabel="Name">@context.shortName</MudTd>
                <MudTd DataLabel="Current Price">@context.regularMarketPrice</MudTd>
                <MudTd DataLabel="Prev Close">@context.regularMarketPreviousClose</MudTd>
                <MudTd DataLabel="Price Change">@context.regularMarketChange</MudTd>
                <MudTd DataLabel="% Change">@context.regularMarketChangePercent</MudTd>
       </RowTemplate>
    </MudTable>
}

@code {
    Stock[] stocks;
    StockIdentifierList stockIds = new StockIdentifierList();

    // TODO: add state to track page/number of items per page on table

    protected async override Task OnInitializedAsync()
    {
        using var client = _clientFactory.CreateClient("yahoo");
        var content = await client.GetFromJsonAsync<ApiStockModel>($"market/v2/get-quotes?region=US&symbols={stockIds.SymbolString}");
        // TODO: Need to add traycatch for this request
        stocks = content.quoteResponse.result;
        AddStockInfo(stocks);

    }

    private async Task AddStockInfo(Stock[] stocklist)
    {
        using var ctx = ctxFactory.CreateDbContext();
        foreach (var stock in stocklist)
        {
            var databaseStock = ctx.Stocks.FirstOrDefault(s => s.symbol == stock.symbol);

            if (databaseStock is not null)
            {
                stock.Id = databaseStock.Id;
                ctx.Stocks.Update(stock);
            }
            else
            {
                ctx.Stocks.Add(stock);
            }
            await ctx.SaveChangesAsync();
        }
    }

    private void GoToStockView(Stock stock)
    {
        using var ctx = ctxFactory.CreateDbContext();
        var DbStock = ctx.Stocks
        .Where(s => s.symbol == stock.symbol)
        .FirstOrDefault();
        NavManager.NavigateTo($"/stocklist/{DbStock.Id}");
    }
}
