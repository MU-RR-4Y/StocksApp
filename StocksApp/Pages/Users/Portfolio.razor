@page "/users/{Userid:int}/portfolio"
@inject NavigationManager NavManager;
@inject IDbContextFactory<StockAppDbContext> context
<PageTitle>Portfolio</PageTitle>


<h1>@user.FirstName @user.LastName Portfolio</h1>


<MudTabs Outlined="true" Position="@Position.Top" Rounded="true" Border="true"
         ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
    <MudTabPanel Text="Overview">
        <MudText>Portfolio Value  : @user.userPortfolio.currentValue  </MudText>

        <MudText>Current Holdings</MudText>

       
        <MudText>Cash Held : @user.userPortfolio.cash </MudText>
        <MudText>Contract notes</MudText>

    </MudTabPanel>
    <MudTabPanel Text="Activity">
        <MudTable Items="user.userPortfolio.orders">
            <HeaderContent>
                <MudTh>Order Type</MudTh>
                <MudTh>Stock</MudTh>
                <MudTh>Symbol</MudTh>
                <MudTh>Shares</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>Currency</MudTh>
                <MudTh>GBP/USD Fx rate</MudTh>
                <MudTh>GBP Value</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Order Type">@context.direction</MudTd>
                <MudTd DataLabel="Stock">@context.shortName</MudTd>
                <MudTd DataLabel="Symbol">@context.symbol</MudTd>
                <MudTd DataLabel="Shares">@context.numberOfShares</MudTd>
                <MudTd DataLabel="Price">@context.price</MudTd>
                <MudTd DataLabel="Currency">@context.currency</MudTd>
                <MudTd DataLabel="GBP/USD Fx rate">@context.fxRate</MudTd>
                <MudTd DataLabel="GBP Value">@context.gbpCashValue</MudTd>
            </RowTemplate>
        </MudTable>
            <MudButton OnClick="AddOrder" Variant="Variant.Filled">AddOrder</MudButton>
        
    </MudTabPanel>
    <MudTabPanel Text="Admin">
        <MudText>Content Three</MudText>
    </MudTabPanel>
</MudTabs>

<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="NavigateToUsersPage">Back to Users</MudButton>

@code {
    [Parameter]
    public int UserId { get; set; }
    private User user { get; set; }



    // TODO: setup layout for portfolio view
    // TODO: track book value
    // TODO: track current value
    // TODO: calculate current performance
    // TODO: look at reporting/bookings on individualstocks. access contract notes. Decide what data structure to use to track this. FIFO suggest using Queue.

    protected override async Task OnParametersSetAsync()
    {
        using var ctx = context.CreateDbContext();
        user = ctx.Users
            .Include(u => u.userPortfolio)
            .Include(u =>u.userPortfolio.holdings)
            .Include(u => u.userPortfolio.orders)
            .FirstOrDefault(u => u.Id == UserId);

    }

    protected async Task AddOrder()
    {
        using var ctx = context.CreateDbContext();
        double fxRate = ctx.FxRates.FirstOrDefault().USDtoGBP;

        Stock stock = new Stock { Id = 9, shortName = "Apple Inc.", symbol = "AAPL", currency = "USD", regularMarketPrice = 185.36};
        Order newOrder = user.userPortfolio.CreateNewOrder(stock, "sell", 2000, fxRate);
        ctx.Orders.Add(newOrder);
        await ctx.SaveChangesAsync();

        user.userPortfolio.UpdateHoldings(newOrder, fxRate);

        foreach (var holding in user.userPortfolio.holdings)
        {
            var databaseHolding = ctx.PortfolioStockModel.FirstOrDefault(h => h.symbol == holding.symbol);
            if (databaseHolding is not null)
            {
                ctx.Entry<PortfolioStockModel>(databaseHolding).State = EntityState.Detached;
                holding.Id = databaseHolding.Id; 
                ctx.PortfolioStockModel.Update(holding);
                
            }
            else
            {
                ctx.PortfolioStockModel.Add(holding);
            }
            await ctx.SaveChangesAsync();
        }

    }

    private void NavigateToUsersPage()
    {
        NavManager.NavigateTo("/users");
    }

}
