@page "/users"
@inject IDbContextFactory<StockAppDbContext> context;
@inject NavigationManager NavManager;
<PageTitle>User</PageTitle>

@if (UserList is null)
{
    <div>Loading ...</div>

}
else
{
    
<MudTable Items="UserList" Hover="true" Class="d-flex justify-end" >
    <HeaderContent  >
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Current Portfolio Value</MudTh>
        <MudTh>Available Cash</MudTh>
        <MudTh class="d-flex justify-center">Actions</MudTh>

    </HeaderContent>
    <RowTemplate >
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
        <MudTd DataLabel=">Current Portfolio Value">@($"{context.userPortfolio.currentPerformance:C2}")</MudTd>
        <MudTd DataLabel=">Available Cash">@($"{context.userPortfolio.cash:C2}")</MudTd>
        <MudTd DataLabel="Actions" class="d-flex justify-space-evenly">
            <MudButton OnClick="(()=>AddCash(context))" Variant="Variant.Filled" Color="Color.Success" Size="Size.Small">Add Cash</MudButton>
            <MudButton OnClick="(()=>GoToPortfolio(context.Id))" Variant="Variant.Filled" Color="Color.Tertiary" Size="Size.Small">View Portfolio</MudButton>
            <MudButton  OnClick="(()=>Delete(context))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small">Delete</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

<MudButton Class="mt-2" Variant="Variant.Filled" Color="Color.Secondary" Href="/users/new">Add User</MudButton>

}

@code {
    private User[]? UserList { get; set; }

    // TODO: add cash to user



    protected override async Task OnParametersSetAsync()
    {
        using var ctx = context.CreateDbContext();

        UserList = await ctx.Users
            .Include(u =>u.userPortfolio)
            .ToArrayAsync();

    }

    private async Task Delete(User user)
    {
        using var ctx = context.CreateDbContext();
        ctx.Users.Remove(user);
        await ctx.SaveChangesAsync();

        await OnParametersSetAsync();
    }

    private async Task AddCash(User user)
    {
        using var ctx = context.CreateDbContext();
        user.userPortfolio.CreditCash(1000);
        ctx.Users.Update(user);
        await ctx.SaveChangesAsync();
        
    }

    private void GoToPortfolio(int id)
    {
        NavManager.NavigateTo($"/users/{id}/portfolio");
    }
}
