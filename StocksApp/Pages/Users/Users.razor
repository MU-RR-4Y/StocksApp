@page "/users"
@inject IDbContextFactory<StockAppDbContext> context;
<PageTitle>User</PageTitle>

@if (UserList is null)
{
    <div>Loading ...</div>

}
else
{
    
<MudTable Items="UserList" Hover="true" Class="d-flex justify-end" >
    <HeaderContent  >
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Current Portfolio Value</MudTh>
        <MudTh>Cash</MudTh>

    </HeaderContent>
    <RowTemplate >
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
            <MudTd DataLabel=">Current Portfolio Value">@($"{context.userPortfolio.currentPerformance:C2}")</MudTd>
                <MudTd DataLabel=">Cash">@($"{context.userPortfolio.cash:C2}")</MudTd>
    </RowTemplate>
</MudTable>

<MudButton Href="/users/new">Add User</MudButton>

}

@code {
    private User[]? UserList { get; set; }

    protected  override async Task OnInitializedAsync()
    {
        using var ctx = context.CreateDbContext();

        UserList = await ctx.Users
            .Include(u =>u.userPortfolio)
            .ToArrayAsync();

    }
}
