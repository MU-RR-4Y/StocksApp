@page "/stocklist"
@using StocksApp.Models;
@using StocksApp.Data;
@using System.Text.Json;
@inject IHttpClientFactory _clientFactory
<h1>StockList</h1>

@if(stocks is null)
{
    <div>Loading...</div>
}
else
{
    <MudTable Items="stocks.Take(54)"Hover="true" >
       <PagerContent>
           <MudTablePager PageSizeOptions="new int[]{10,20,50}"/>
       </PagerContent>
        <HeaderContent>
                <MudTh>Symbol</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Current Price</MudTh>
                <MudTh>Prev Close</MudTh>
                <MudTh>Price Change</MudTh>
                <MudTh>% Change</MudTh>
        </HeaderContent>
        <RowTemplate>
                <MudTd DataLabel="Symbol">@context.symbol</MudTd>
                <MudTd DataLabel="Name">@context.shortName</MudTd>
                <MudTd DataLabel="Current Price">@context.regularMarketPrice</MudTd>
                <MudTd DataLabel="Prev Close">@context.regularMarketPreviousClose</MudTd>
                <MudTd DataLabel="Price Change">@context.regularMarketChange</MudTd>
                <MudTd DataLabel="% Change">@context.regularMarketChangePercent</MudTd>
       </RowTemplate>
    </MudTable>
}

@code {
    Stock[] stocks;
    StockIdentifierList stockIds = new StockIdentifierList();

    protected async override Task OnInitializedAsync()
    {
        var client = _clientFactory.CreateClient();
        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri($"https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/v2/get-quotes?region=US&symbols={stockIds.SymbolString}"),
                Headers =
                {
                    { "X-RapidAPI-Key", "22cec8c348mshb9ff4f2d3e09e36p13b6f6jsnb90a0998a29b" },
                    { "X-RapidAPI-Host", "apidojo-yahoo-finance-v1.p.rapidapi.com" }
                },
            };
        using (var response = await client.SendAsync(request))
        {
            response.EnsureSuccessStatusCode();
            var content = await response.Content.ReadFromJsonAsync<StockModel>();

            stocks = content.quoteResponse.result;
        }
    }
}
