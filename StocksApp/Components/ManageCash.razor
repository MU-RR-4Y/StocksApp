@using StocksApp.Pages.Users;
@inject IDbContextFactory<StockAppDbContext> context;


@if(user is not null)
{
    <MudPopover Open="@visibility" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" Style="padding:16px; margin: 16px;">
        <div class="d-flex flex-column" >
            <h1 style="text-decoration-line: underline;" >@user.FirstName @user.LastName's Account</h1>
            <MudText>Current Cash : @($"{user.userPortfolio.cash:C2}")</MudText>
            <div class="d-flex justify-center">
                <MudNumericField @bind-Value="amount" T="int"></MudNumericField>
                <MudButton Variant="Variant.Filled" OnClick="@_AddCash" Class="ml-auto mr-n3 mb-1" Color="Color.Success">Add Cash</MudButton>
            </div>
                <MudButton Variant="Variant.Filled" OnClick="@_Withdraw" Color=" Color.Secondary">Withdraw Cash</MudButton>
        </div>
    </MudPopover>
}


@code {
    [Parameter]
    public User user { get; set; }
    [Parameter]
    public bool visibility { get; set; }
    [Parameter]
    public Func<User, int, Task> AddCash { get; set; }
    [Parameter]
    public Func<User, Task> Withdraw { get; set; }

    public int amount{ get; set; }


    // invoke callback functions

    private async Task _AddCash()
    {
        await AddCash.Invoke(user,amount);
        amount = 0;
    } 

    private async Task _Withdraw()
    {
        await Withdraw.Invoke(user);
    }


    }




          